package com.oneform.frameworks.core.base.page;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Locale;

import com.oneform.frameworks.core.base.common.CoreConstants;

/**
 * 分页参数与分页结果.
 * 
 * @author yc
 */
public class PageOut<T> {
    // ==========================================
    /** 正序. */
    public static final String ASC = "ASC";

    /** 倒序. */
    public static final String DESC = "DESC";
    
    /** 排序字段名. */
    private List<String> orderBys = new ArrayList<String>();

    /** 使用正序还是倒序. */
    private List<String> orders = new ArrayList<String>();
    
    
    // fields...
    /** 当前第几页，默认值为1，既第一页. */
    private int pageNumber = 1;

    /** 每页最大记录数，默认值为10. */
    private int pageSize = CoreConstants.PUB_DEFAULT_PAGE_SIZE;

    /** 总记录数，默认值为-1，表示totalCount不可用. */
    private long total = -1L;

    /** 总页数，默认值为-1，表示pageCount不可用. */
    private long pageCount = -1;
    
    /** 查询结果. */
    private List<T> rows;

    // ==========================================
    // constructor...
    /** 构造方法. */
    public PageOut() {
    	total = 0;
    	rows = new ArrayList<T>();
    }

    /**
     * 构造方法.
     * 
     * @param result
     *            Object
     * @param totalCount
     *            int
     */
    public PageOut(List<T> result, int totalCount) {
        this.rows = result;
        this.total = totalCount;
    }

    // ==========================================
    // getter and setter method...
    /** @return pageNo. */
    public int getPageNumber() {
        return pageNumber;
    }

    /**
     * @param pageNo
     *            int.
     */
    public void setPageNumber(int pageNumber) {
        this.pageNumber = pageNumber;
    }

    /** @return pageSize. */
    public int getPageSize() {
        return pageSize;
    }

    /**
     * @param pageSize
     *            int.
     */
    public void setPageSize(int pageSize) {
        this.pageSize = pageSize;
    }

    /** @return result. */
    public List<T> getRows() {
        return rows;
    }

    /**
     * @param result
     *            Object.
     */
    public void setRows(List<T> rows) {
        this.rows = rows;
    }

    /** @return totalCount. */
    public long getTotal() {
        return total;
    }

    /**
     * @param totalCount
     *            int.
     */
    public void setTotal(long total) {
        this.total = total;
    }


    /** @return pageCount. */
    public long getPageCount() {
        return pageCount;
    }
    
    public void setPageCount(long pageCount) {
        this.pageCount = pageCount;
    }

    /** @return result size. */
    public int getResultSize() {
        if (rows instanceof Collection) {
            return ((Collection<T>) rows).size();
        } else {
            return 0;
        }
    }
    
    /**
     * 是否为正序排序.
     * 
     * @return boolean
     */
    public boolean isAsc() {
        return !DESC.equalsIgnoreCase(this.getOrder());
    }
    
    /** @return order. */
    public String getOrder() {
        if (!this.orders.isEmpty()) {
            return this.orders.get(0);
        }

        return ASC;
    }

    /**
     * @param order
     *            String.
     */
    public void setOrder(String order) {
        this.checkAndSetOrder(order);
    }
    
    /**
     * chck and set order.
     * 
     * @param text
     *            String
     */
    private void checkAndSetOrder(String text) {
        if (ASC.equalsIgnoreCase(text) || DESC.equalsIgnoreCase(text)) {
            text = text.toUpperCase(Locale.CHINA);
            this.orders.clear();
            this.orders.add(text);
        } else {
            throw new IllegalArgumentException(
                    "order should be 'DESC' or 'ASC'");
        }
    }


}
