package com.company.testpro.base.dao.impl;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.annotation.Resource;
import javax.persistence.Column;
import javax.persistence.Table;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.util.LinkedCaseInsensitiveMap;
import org.springframework.util.StringUtils;
import com.company.testpro.base.dao.BaseDao;
import com.company.testpro.myUtils.JdbcPlugin;

@Repository("baseDaoImpl")
public class BaseDaoImpl implements BaseDao {

	protected final Log logger = LogFactory.getLog(getClass());
	@Resource
	private JdbcTemplate jdbcTemplate;

	@Override
	public void testDao() {
		System.out.print(jdbcTemplate.toString());
	}

	/**
	 * @return 数据List
	 * @description
	 *              通用查询
	 *              参数一：注解基类
	 *              参数二：查询VO类
	 *              参数三：排序SQL （可为空）
	 */
	@SuppressWarnings({ "rawtypes", "unchecked", "unused" })
	@Override
	public <T, E> List<E> getEntityByField(T t, E e, String orderSQL) {
		String tabName = ""; // 表名称
		Map whereMap = new HashMap(); // 查询表字段 与 vo字段查询值 用于查询
		Map vo2TabMap = new HashMap(); // VO映射表名 用于mapping
		List selectList = new ArrayList();//查询表所有关于Vo的字段名 用于查询
		try {
			Class objClz = t.getClass();
			Annotation[] annotations = objClz.getDeclaredAnnotations();//pro类全部注释
			Annotation annotation = objClz.getAnnotation(Table.class);
			tabName = (String) annotation.annotationType().getDeclaredMethod("name").invoke(annotation);//获取表名称
			Field[] fields = objClz.getDeclaredFields();//pro类全部属性
			if (fields != null) {
				for (int i = 0; i < fields.length; i++) {
					Field field = fields[i];//pro类单个属性
					Annotation fieldAnno = field.getAnnotation(Column.class);// pro类属性上的column注解 以此  获取表字段名
					Field[] fieldsVoArr = e.getClass().getDeclaredFields();//vo类全部属性
					Object fieldObj = null;//vo类属性的值 对应 表查询字段值
					if (fieldAnno != null) {
						String fieldStr = (String) fieldAnno.annotationType().getDeclaredMethod("name").invoke(fieldAnno);
						selectList.add(fieldStr);//添加所有查询字段

						for (Field fieldVo : fieldsVoArr) {
							if (fieldVo.getName().equals(field.getName())) {// 匹配与当前pro类属性相同的vo类属性 where
								vo2TabMap.put(fieldVo.getName(), fieldStr); //匹配vo对应表字段 1.表 2.vo
								fieldVo.setAccessible(true); //属性可能为private
								fieldObj = fieldVo.get(e);//获取vo映射的该属性的属性值
								if (fieldStr != null && fieldObj != null) {
									whereMap.put("field" + i, fieldStr);
									whereMap.put("value" + i, fieldObj);
									whereMap.put("fieldLength", i + 1);

								}
							}
						}

					}
				}
			}

//			String SQL = getQuerySQL(selectList, whereMap, tabName, orderSQL);
//			SQL = " select * from  (select e.*, rownum rn from ("+SQL+") e"+")"+"  where rn>1 and rn<3";
//			List<E> list = (List<E>) jdbcTemplate.queryForList(SQL);

//			Object [] params = getQueryParameters(whereMap);
			Map prepareSQLMap = getPrepareSQLMap(selectList, whereMap, tabName, orderSQL);
			JdbcPlugin jdbcPlugin = new JdbcPlugin((String) prepareSQLMap.get("SQL"), true);

			int opration = 3;
			String tabColNa = "tabColNa";
			Object parm = "parm";
//			String tabColNa = (String)	vo2TabMap.get(filedNa);
			jdbcPlugin.addQueryCondition(opration, "t." + tabColNa, parm);

			List<E> list = (List<E>) jdbcTemplate.queryForList(jdbcPlugin.exportSql(), jdbcPlugin.exportParms());
//			List<E> list = (List<E>) jdbcTemplate.queryForList((String) prepareSQLMap.get("SQL"), (Object[]) prepareSQLMap.get("params"));

			List mappedList = mappingObj(list, e, vo2TabMap);
			System.out.println("SQL=" + (String) prepareSQLMap.get("SQL") + "\n" + "Params==" + toString((Object[]) prepareSQLMap.get("params")) + "\n" + "ResultList===" + toString(mappedList.toArray()));
			return mappedList;
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return null;
	}
	//para:  t baseAnnotationClass e queryClass returnclz returnClass  map key:tableFieldName value: queryCondition	
	@SuppressWarnings({ "rawtypes", "unchecked", "unused", "static-access" })
	@Override
	public <T, E> List<E> getEntityByQcMap(T t, E e, Class returnClz, Map qcMap) {
		String tabName = ""; // 表名称
		Map whereMap = new HashMap(); // 查询表字段 与 vo字段查询值 用于查询
		Map vo2TabMap = new HashMap(); // VO映射表名 用于mapping
		List selectList = new ArrayList();//查询表所有关于Vo的字段名 用于查询

		try {
			Class objClz = t.getClass();
			Annotation[] annotations = objClz.getDeclaredAnnotations();//pro类全部注释
			Annotation annotation = objClz.getAnnotation(Table.class);
			tabName = (String) annotation.annotationType().getDeclaredMethod("name").invoke(annotation);//获取表名称
			Field[] fields = objClz.getDeclaredFields();//pro类全部属性
			Field[] fieldsVoArr = e.getClass().getDeclaredFields();//vo类全部属性

			Field[] fieldsReturn = returnClz.getDeclaredFields();//返回类 全部属性
			if (fields != null) {
				for (int i = 0; i < fields.length; i++) {
					Field field = fields[i];//pro类单个属性
					Annotation fieldAnno = field.getAnnotation(Column.class);// pro类属性上的column注解 以此  获取表字段名
					Object fieldObj = null;//vo类属性的值 对应 表查询字段值
					if (fieldAnno != null) {
						String fieldStr = (String) fieldAnno.annotationType().getDeclaredMethod("name").invoke(fieldAnno);
						selectList.add(fieldStr);//添加所有查询字段

						for (Field fieldReturn : fieldsReturn) {
							if (fieldReturn.getName().equals(field.getName())) {// 匹配与当前pro类属性相同的return类属性 mapping
								vo2TabMap.put(fieldReturn.getName(), fieldStr); //匹配返回类对应表字段 1.表 2.vo
							}
						}

						for (Field fieldVo : fieldsVoArr) {
							if (fieldVo.getName().equals(field.getName())) {// 匹配与当前pro类属性相同的vo类属性 where
								fieldVo.setAccessible(true); //属性可能为private
								fieldObj = fieldVo.get(e);//获取vo映射的该属性的属性值
								if (fieldStr != null && fieldObj != null) {
									whereMap.put("field" + i, fieldStr);
									whereMap.put("value" + i, fieldObj);
									whereMap.put("fieldLength", i + 1);
								}
							}
						}
					}

				}
			}

			Map prepareSQLMap = getQCSQLMap(selectList, whereMap, tabName, null);

			JdbcPlugin jdbcPlugin = new JdbcPlugin((String) prepareSQLMap.get("SQL"), true);

			for (Field field : fields) {
				for (int i = 0; i < fieldsVoArr.length; i++) {
					Field fieldVo = fieldsVoArr[i];
					if (fieldVo.getName().equals(field.getName())) {// 
						fieldVo.setAccessible(true); //属性可能为private
						Object fieldObj = fieldVo.get(e);//获取vo映射的该属性的属性值
						//根据 qcMap表名获取与当前字段匹配 key 如果没有默认  =与 ，有就匹配 后面的运算符
						Set qcKeySet = qcMap.keySet();
						for (int j = 0; j < qcKeySet.size(); j++) {
							if (vo2TabMap.get(fieldVo.getName()).equals(qcKeySet.toArray()[j]) && fieldObj != null) { //有值 有查询条件
								jdbcPlugin.addQueryCondition((int) qcMap.get(qcKeySet.toArray()[j]), "t." + (String) qcKeySet.toArray()[j], fieldObj);//字段 与当前相同 有查询条件（先不考虑默认情况）
							} else if (fieldObj != null) {//有值，没有查询条件  默认等于查询
								jdbcPlugin.addQueryCondition(jdbcPlugin.EQUAL, "t." + vo2TabMap.get(fieldVo.getName()), fieldObj);
							}
						}
					}
				}
			}

			List<E> list = (List<E>) jdbcTemplate.queryForList(jdbcPlugin.exportSql(), jdbcPlugin.exportParms());
			List mappedList = mappingObjClz(list, returnClz, vo2TabMap);
			System.out.println("SQL=" + (String) jdbcPlugin.exportSql() + "\n" + "Params==" + toString((Object[]) jdbcPlugin.exportParms()) + "\n" + "ResultList===" + toString(mappedList.toArray()));
			return mappedList;

		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return null;
	}

	public String toString(Object[] obj) {
		String s = "";
		for (Object object : obj) {
			s += object.toString() + " , ";
		}
		return s;
	}

	/**
	 * QueryCondition SQL获取
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Map getQCSQLMap(List selectList, Map whereMap, String tabName, String orderSQL) {
		Map SQLAndParams = new HashMap();
		String SQL = " select ";
		String whereSQL = " where 1=1 ";
		List params = new ArrayList();
		for (int j = 0; j < selectList.size(); j++) {
			SQL += (selectList.size() == 1 || j + 1 == selectList.size()) ? ("t." + selectList.get(j)) : ("t." + selectList.get(j) + ", ");//只有一个字段 或者 循环到最后一个字段 不需要,
		}
		if (!StringUtils.isEmpty(tabName))
			SQL += " from " + tabName + " t";
		if (!StringUtils.isEmpty(whereSQL))
			SQL += whereSQL;
		if (!StringUtils.isEmpty(orderSQL))
			SQL += orderSQL;
		SQLAndParams.put("SQL", SQL);
		SQLAndParams.put("params", params.toArray());
		return SQLAndParams;
	}

	/**
	 * @param selectList
	 * @param whereMap
	 * @param tabName
	 * @param orderSQL
	 * @return SQLAndParamsMap SQL 和 参数列表
	 * @see getQuerySQL
	 * @author XuMing
	 * @Date 2017年3月23日
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Map getPrepareSQLMap(List selectList, Map whereMap, String tabName, String orderSQL) {
		Map SQLAndParams = new HashMap();
		String SQL = " select ";
		String whereSQL = " where 1=1 ";
		List params = new ArrayList();
		int fieldLength = (int) whereMap.get("fieldLength");
		for (int j = 0; j < selectList.size(); j++) {
			SQL += (selectList.size() == 1 || j + 1 == selectList.size()) ? ("t." + selectList.get(j)) : ("t." + selectList.get(j) + ", ");//只有一个字段 或者 循环到最后一个字段 不需要,
		}
		for (int i = 0; i < fieldLength; i++) {
			if (whereMap.get("field" + i) != null && whereMap.get("value" + i) != null) {//jdbctemp newobj list  /orcal ?绑定
				if (params.size() == 0)
					whereSQL += " and ";
				params.add(whereMap.get("value" + i));
				whereSQL += (fieldLength == 1 || i + 1 == fieldLength) ? ("t." + whereMap.get("field" + i) + "=" + "?" + "  ") : ("t." + whereMap.get("field" + i) + "=" + "?" + "  " + "and ");
			}
		}
		if (!StringUtils.isEmpty(tabName))
			SQL += " from " + tabName + " t";
		if (!StringUtils.isEmpty(whereSQL))
			SQL += whereSQL;
		if (!StringUtils.isEmpty(orderSQL))
			SQL += orderSQL;
		SQLAndParams.put("SQL", SQL);
		SQLAndParams.put("params", params.toArray());
		return SQLAndParams;
	}

	/**
	 * @param list
	 *            查询返回原始数据集合
	 * @param mapTo
	 *            vo类
	 * @param vo2TabMap
	 *            vo映射表字段
	 * @return MappedObjectList 封装过后的VOList
	 * @author XuMing
	 * @Date 2017年3月23日
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public <T, E> List<E> mappingObj(List<T> list, E mapTo, Map vo2TabMap) {
		List<E> mappedList = new ArrayList();
		try {
			Class mapToClz = mapTo.getClass();
			for (int j = 0; j < list.size(); j++) {//循环一次添加一条eList记录
				Object mapToObj = mapToClz.newInstance();//每次添加一条新对象
				for (int i = 0; i < mapToClz.getDeclaredFields().length; i++) {//循环一次添加一条完整记录
					Field tofield = mapToClz.getDeclaredFields()[i];
					if (tofield != null) {
						//这里尽量不要直接用getMethod 
						//获取set方法需要传入方法参数
						String setMethodName = "set" + tofield.getName().substring(0, 1).toUpperCase() + tofield.getName().substring(1);
						Method setMethod = mapToClz.getDeclaredMethod(setMethodName, tofield.getType());
						setMethod.setAccessible(true);
						LinkedCaseInsensitiveMap lcim = (LinkedCaseInsensitiveMap) list.get(j);//jdbcTemple查询返回的结果集类型表字段 加值
						if (lcim != null) {
							Object obj = lcim.get(vo2TabMap.get(tofield.getName()));
							setMethod.invoke(mapToObj, obj);//此处如果数据库查出的类型 无法匹配到Vo字段类型 抛出IllegalArgumentException
						}
					}
				}

				mappedList.add((E) mapToObj);
			}
			return mappedList;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public <T, E> List<E> mappingObjClz(List<T> list, Class mapToClz, Map vo2TabMap) {
		List<E> mappedList = new ArrayList();
		try {
			for (int j = 0; j < list.size(); j++) {//循环一次添加一条eList记录
				Object mapToObj = mapToClz.newInstance();//每次添加一条新对象
				for (int i = 0; i < mapToClz.getDeclaredFields().length; i++) {//循环一次添加一条完整记录
					Field tofield = mapToClz.getDeclaredFields()[i];
					if (tofield != null) {
						//这里尽量不要直接用getMethod 
						//获取set方法需要传入方法参数
						String setMethodName = "set" + tofield.getName().substring(0, 1).toUpperCase() + tofield.getName().substring(1);
						Method setMethod = mapToClz.getDeclaredMethod(setMethodName, tofield.getType());
						setMethod.setAccessible(true);
						LinkedCaseInsensitiveMap lcim = (LinkedCaseInsensitiveMap) list.get(j);//jdbcTemple查询返回的结果集类型表字段 加值
						if (lcim != null) {
							Object obj = lcim.get(vo2TabMap.get(tofield.getName()));
							setMethod.invoke(mapToObj, obj);//此处如果数据库查出的类型 无法匹配到Vo字段类型 抛出IllegalArgumentException
						}
					}
				}

				mappedList.add((E) mapToObj);
			}
			return mappedList;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * @param selectList
	 *            查询字段List
	 * @param whereMap
	 *            查询条件Map
	 * @param tabName
	 *            表面
	 * @param orderSQL
	 *            排序SQL 可NULL
	 * @return QuerySQL 拼接过后的完整SQL
	 * @author XuMing
	 * @Date 2017年3月23日
	 */
	//适用于mysq  cloumn基本等于查询
	@SuppressWarnings("rawtypes")
	public String getQuerySQL(List selectList, Map whereMap, String tabName, String orderSQL) {//p1.查询条件 
		String SQL = " select ";
		String whereSQL = " where ";
		int fieldLength = (int) whereMap.get("fieldLength");
		for (int j = 0; j < selectList.size(); j++) {
			SQL += (selectList.size() == 1 || j + 1 == selectList.size()) ? ("t." + selectList.get(j)) : ("t." + selectList.get(j) + ", ");//只有一个字段 或者 循环到最后一个字段 不需要,
		}
		for (int i = 0; i < fieldLength; i++) {
			if (whereMap.get("field" + i) != null && whereMap.get("value" + i) != null)//jdbctemp newobj list  /orcal ?绑定
				whereSQL += (fieldLength == 1 || i + 1 == fieldLength) ? ("t." + whereMap.get("field" + i) + "=" + "'" + whereMap.get("value" + i) + "'" + "  ") : ("t." + whereMap.get("field" + i) + "=" + "'" + whereMap.get("value" + i) + "'" + "  " + "and ");
		}
		if (!StringUtils.isEmpty(tabName))
			SQL += " from " + tabName + " t";
		if (!StringUtils.isEmpty(whereSQL))
			SQL += whereSQL;
		if (!StringUtils.isEmpty(orderSQL))
			SQL += orderSQL;
		return SQL;
	}

}
